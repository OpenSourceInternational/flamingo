#!/usr/bin/env php
<?php

if (file_exists(__DIR__ . '/../autoload.php')) {
    require_once __DIR__ . '/../autoload.php';
} elseif (file_exists(__DIR__ . '/../vendor/autoload.php')) {
    require_once __DIR__ . '/../vendor/autoload.php';
} elseif (file_exists(__DIR__ . '/../../../autoload.php')) {
    require_once __DIR__ . '/../../../autoload.php';
}

// Create command controller and register options
$command = new \Commando\Command();

$command
    ->option('v')
    ->aka('version')
    ->describedAs('Output version information and exit.')
    ->boolean();

$command
    ->option('d')
    ->aka('debug')
    ->describedAs('Output debug information.')
    ->boolean();

$command
    ->option('f')
    ->aka('force')
    ->describedAs('Force execution of the tasks on error.')
    ->boolean();

$command
    ->option()
    ->describedAs('Name of the task file to execute.');

// Decode the composer.json configuration
$composer = json_decode(file_get_contents(__DIR__ . '/../composer.json'), true);
$GLOBALS['FLAMINGO']['Version'] = $composer['version'];

// Output executable version
if ($command['version']) {
    echo $composer['version'] . PHP_EOL;
    exit;
}

// Register error handler
$handler = \Flamingo\Service\ErrorHandler::init($command['debug'], $command['force']);
\Analog\Analog::handler($handler);

// TODO: Add support for inline options
$task = $command[0];
$arguments = [];

// Decode the given task
$parser = new \Flamingo\Service\TaskNameParser($task);
$className = $parser->getClass();
$method = $parser->getMethod();

Analog::info(sprintf('Running "%s"...', $className ?: $method));
$startTime = microtime(true);

// Run the task with arguments
$parser->run($arguments);

$elapsedTime = microtime(true) - $startTime;
Analog::info(sprintf('Finished "%s" in %fs', $className ?: $method, $elapsedTime));
