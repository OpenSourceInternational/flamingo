Flamingo:

  # Flamingo application version
  Version: 1.0.0

  # Report low level logs
  Debug: false

  # Continue execution if an error has been thrown
  Force: false

  # Minimum version needed in order to run your custom configuration
  # Need to be a standard format: http://php.net/manual/fr/function.version-compare.php
  RequiredVersion:

  # Include these PHP files and get access to custom functions
  # Can be string or array
  Include:

  # Implementation classes
  Classes:
    Processor:
      Source:
        className: Flamingo\Processor\ReaderProcessor
      Destination:
        className: Flamingo\Processor\WriterProcessor
      Transform:
        className: Flamingo\Processor\TransformProcessor
      Mapping:
        className: Flamingo\Processor\MappingProcessor
      Function:
        className: Flamingo\Processor\FunctionProcessor
    Reader:
      Csv:
        className: Flamingo\Processor\Reader\CsvReader
      Db:
        className: Flamingo\Processor\Reader\DbReader
      Excel:
        className: Flamingo\Processor\Reader\ExcelReader
      Json:
        className: Flamingo\Processor\Reader\JsonReader
      Xml:
        className: Flamingo\Processor\Reader\XmlReader
      Yaml:
        className: Flamingo\Processor\Reader\YamlReader
    Writer:
      Cli:
        className: Flamingo\Processor\Writer\ConsoleWriter
      Csv:
        className: Flamingo\Processor\Writer\CsvWriter
      Db:
        className: Flamingo\Processor\Writer\DbWriter
      Json:
        className: Flamingo\Processor\Writer\JsonWriter
      Xml:
        className: Flamingo\Processor\Writer\XmlWriter
      Yaml:
        className: Flamingo\Processor\Writer\YamlWriter

  # Additional global options
  # These can are accessible through $GLOBALS
  Options:

    # Keep old fields after new ones are mapped
    Mapping:
      KeepOldProperties: false

    # Don't apply processor if field does not exist
    Transform:
      PropertyMustExist: false

    # Use first line in files as header key list
    Header:
      Line: 0

    # Execute inserts with ignore clause
    # Can be useful to ignore NULL values
    Sql:
      InsertIgnore: false

    # Parsers allowed extensions
    # Be careful to not use the same extension for multiple parsers
    FileProcessorExtensions:
      Csv: csv
      Db: db
      Excel: xls,xlsx
      Json: json,js
      Xml: xml
      Yaml: yaml,yml

# ------------------------------------
# EXAMPLES + NEW FEATURES TO IMPLEMENT
# ------------------------------------

# TODO: Add SingleSourceProcessor and MultipleSourceProcessor interfaces (or traits?)
# Add __source to determine what source to process (for SingleSourceProcessors)

# TODO: Allow streams to persist through tasks
# Find a way to insert and delete sources inside the stream

# TODO: Add __function for FunctionProcessor
# Pass parameters to the user function

# TODO: Add configuration for the ModifierProcessor
# Avoid the creation of multiple files for nothing

# TODO: Throw error and allow different kind of log connectors

# TODO: Optimize the DB writer using commits

# TODO: Remove non-used files from PHPOffice
# So the .phar file can be lighter

# TODO: Migrate linq to another library
# Add more extended support for complicated requests
# Add a SQL statement parser for this kind of library (as a separated project)
# https://github.com/fusonic/linq

# TODO: Enable the use of CLI arguments (not sure which way yet)
# Arguments an be used using a custom source (as file or stream or anything else)

#Hello():
#  __inheritances:
#    10: HelloMixin
#
#HelloMixin:
#  - Source: file.json
#  - Modify:
#      __source: 0 # Source number
##      __inheritances: []
#      Hey: test
#  - Call:
#      __function: test::test # callable
#      bonjour: Hello
#      param2: [ value2, value3 ]
